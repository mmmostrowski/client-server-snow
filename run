#!/usr/bin/env bash
set -eu

function init() {
    export SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    export SCRIPT_PID="${BASHPID}"
    export SCRIPT_OWNER_PID="${SCRIPT_OWNER_PID:-}"
    export PHP_SNOW_APP_MODE="${PHP_SNOW_APP_MODE:-production}"
}

function main() {
    init;

    if [[ "${1:-}" == 'bash' ]] || [[ "${1:-}" == 'dev' ]]; then
        export PHP_SNOW_APP_MODE=develop

        if [[ "${2:-}" == "snow-client" ]] || [[ "${2:-}" == "snow-client-reactjs" ]]; then
            runPhpSnowClientReact dev
            return 0
        fi
    fi

    if [[ "${1:-}" == "--docker-killer" ]]; then
        shift 1
        watchForDockerKill "${1}" "${2}" "${3:-}"
        return 0
    fi

    if [[ "${1:-}" == "snow-client" ]] || [[ "${1:-}" == "snow-client-reactjs" ]]; then
        shift 1
        runPhpSnowClientReact "${@}"
        return 0
    fi

    runPhpSnow "${@}"
}

function runPhpSnow() (
    removeDockerContainerInBackground "snow-php-server"

    cd "${SCRIPT_DIR}"
    mkdir -p ".pipes/";

    docker run -t"$( [ -t 0 ] && echo 'i' )" --rm \
        --name "snow-php-server-${SCRIPT_PID}" \
        --volume "${SCRIPT_DIR}/app/:/snow/app/" \
        --volume "${SCRIPT_DIR}/.pipes/:/snow/.pipes/" \
        --volume "${SCRIPT_DIR}/java-proxy/:/snow/java-proxy/" \
        $( isLocalPortBusy 8080 || echo '-p 8080:8080' ) \
        --user $(id -u):$(id -g) \
        --add-host=host.docker.internal:host-gateway \
        --env PHP_SNOW_APP_MODE \
        $( build dockerSnowApp ) \
        "${@}" \
    ;
)

function dockerSnowApp() {
    docker build \
        --file "docker/Dockerfile" \
        --build-arg="UID=$(id -u)" \
        --build-arg="GID=$(id -g)" \
        --build-arg="PHP_SNOW_APP_MODE" \
        . \
        "${@}" \
    ;
}

function runPhpSnowClientReact() (
    cd "${SCRIPT_DIR}"
    mkdir -p ".pipes/";

    removeDockerContainerInBackground "snow-reactjs-client"

    docker run -t"$( [ -t 0 ] && echo 'i' )" --rm \
        --name "snow-reactjs-client-${SCRIPT_PID}" \
        --volume "${SCRIPT_DIR}/reactjs-client/:/snow/reactjs-client/" \
        -p 8181:8181 \
        -p 3000:3000 \
        --user $(id -u):$(id -g) \
        --add-host=host.docker.internal:host-gateway \
        --env PHP_SNOW_APP_MODE \
        $( build dockerReactjsClient ) \
        "${@}" \
    ;
)

function dockerReactjsClient() {
    docker build \
        --file "docker/reactjs-client/Dockerfile" \
        --build-arg="UID=$(id -u)" \
        --build-arg="GID=$(id -g)" \
        --build-arg="PHP_SNOW_APP_MODE" \
        . \
        "${@}" \
    ;
}

function build() {
    local buildFunction="${1}"
    shift 1

    if [[ "${PHP_SNOW_APP_MODE}" == "develop" ]]; then
        ${buildFunction} "${@}"
        ${buildFunction} "${@}" --quiet
        return 0
    fi

    echo 'Building...' >&2
    ${buildFunction} "${@}"

    if ! ${buildFunction} "${@}" --quiet; then
        ${buildFunction} "${@}"
        return 1
    fi
}

function removeDockerContainerInBackground() {
    local containerPrefix="${1}"

    setsid "${BASH_SOURCE[0]}" --docker-killer "${containerPrefix}" "${SCRIPT_PID}" ${SCRIPT_OWNER_PID:-} &> /dev/null &
}

function watchForDockerKill() {
    local containerPrefix="${1}"
    local listenForPid="${2}"
    local listenForAnotherPid="${3:-}"

    (
        while true; do
            sleep 1
            if ! ps -p ${listenForPid} \
                || ( [[ -n "${listenForAnotherPid}" ]] && ! ps -p ${listenForAnotherPid} ); then
                break;
            fi
        done

        docker rm -f "${containerPrefix}-${listenForPid}"
    ) &> /dev/null;
}

function isLocalPortBusy() {
    local port="${1}"

    ( echo >/dev/tcp/localhost/${port} ) &>/dev/null
}

main "${@}"
